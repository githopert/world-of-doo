import pymunk as pm


class Doo(pm.Poly):
	''' Класс, описывающий ОБЩИЕ черты всех видов Ду (свободных и фиксированных).
	
	Модифицирует класс pymunk.Poly.
	Ду представляют собой квадраты. Центр масс (объект body) Ду находится середине квадрата.
	Через body также проходит ось вращения Ду.
	Мы не создаем класс с нуля, чтобы в дальнейшем использовать возможности обработки столкновений. 
	МЫ НЕ БУДЕМ СОЗДАВАТЬ ЭКЗЕМПЛЯРЫ ЭТОГО КЛАССА.
	
	Аргументы:
	----------
	x : float или int
		Позиция центра масс (body) Ду в пространстве симуляции по оси X.
	y : float или int
		Позиция центра масс (body) Ду в пространстве симуляции по оси Y.
	mass : float или int
		Масса Ду (значение по умолчанию подобрано эмпирически). Масса - мера инертности при поступательном движении.
	moment : float или int
		Момент инерции Ду (значение по умолчанию подобрано эмпирически). Момент инерции - мера инертности при вращательном движении.
	r : float или int
		Радиус Ду, т.е. половина стороны квадрата.


	Атрибуты (добавленные в классе Doo):
	----------
	rad : float или int
		Радиус Ду, т.е. половина стороны квадрата.
	ground : bool
		Если данная логическая переменная равна True, то Ду касается земли (пола).
	'''
	def __init__(self, x, y, mass=10, moment=10000, r=10):
		# Вызываем метод __init__() класса pm.Poly (подробнее см. класс World).
		# Объекты класса Shape привязываются к объектам класса Body. Создаем такой объект на лету (pm.Body()).
		# [(-r,-r), (r,-r), (r,r), (-r,r)] -- координаты вершин многоугольника относительно объекта Body (~ центр масс тела).
		super().__init__(pm.Body(mass,moment),[(-r,-r), (r,-r), (r,r), (-r,r)])
		self.body.position	= x,y
		self.rad			= r
		self.ground 		= False
		
	def check_ground(self, world):
		''' Метод для проверки того,коснулся ли Ду пола.
		
		Ду должен находиться от пола не дальше, чем на свой радиус.
		'''
		return self.body.position.y >= (world.ground_y-self.rad)




class DooFree(Doo):
	''' Класс, описывающий свойства и поведение свободных Ду.
	
	Модифицирует класс Doo.
	
	Аргументы:
	----------
	x : float или int
		Позиция центра масс (body) свободного Ду в пространстве симуляции по оси X.
	y : float или int
		Позиция центра масс (body) свободного Ду в пространстве симуляции по оси Y.

	Атрибуты (добавленные и переопределенные в классе DooFree):
	----------
	friction : int или float
		Коэффициент трения при движении по другому объекту. Значение подобрано эмпирически. 
		В Pymunk используется модель Кулона для трения. 
		Результирующий коэффициент трения находится перемножением коэффициентов трения соприкасающихся шейпов.
	collision_type : int
		Параметр, позволяющий нам различать разные типы объектов. Используется при обработке столкновений. 
		Значение 0 будет соответствовать свободным Ду.
	'''
	def __init__(self,x,y):
		# Переопределяем значение атрибутов
		
		super(DooFree, self).__init__(x,y)
		# Переопределм значения атрибутов
		self.friction = 10
		self.collision_type = 0




class DooFixed(Doo):
	""" Класс, описывающий свойства и поведение фиксированных Ду.
	
	Модифицирует класс Doo.
	
	Аргументы:
	----------
	x : float или int
		Позиция центра масс (body) фиксированного Ду в пространстве симуляции по оси X.
	y : float или int
		Позиция центра масс (body) фиксированного Ду в пространстве симуляции по оси Y.

	Атрибуты (добавленные и переопределенные в классе DooFixed):
	----------
	friction : int или float
		Коэффициент трения. Значение подобрано эмпирически.
		В Pymunk используется модель Кулона для трения. 
		Результирующий коэффициент трения находится перемножением коэффициентов трения соприкасающихся шейпов.
	collision_type : int
		Параметр, позволяющий нам различать разные типы объектов. Используется при обработке столкновений. 
		Значение 1 будет соответствовать фиксированным Ду.
	distance : float
		Расстояние между Ду и некоторой точкой (например, положением курсора мыши).
		Используется для нахождения подходящих (и ближайших) фиксированных Ду при строительстве.
	color : tuple
		Цвет фиксированных Ду в формате RGBA. Фиксированных Ду будут желтыми.
	"""
	def __init__(self, x, y, r=8, mass=10):
		super(DooFixed, self).__init__(x, y, r=r, mass=mass)
		self.friction = 100
		self.collision_type = 1
		self.distance = 0.0
		self.color = (200, 200, 0, 255)
