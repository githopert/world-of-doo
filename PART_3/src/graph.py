class Graph(dict):
	""" Класс, описывающий башню в игре. Башня описывается ненаправленным графом.
	
	Модифицирует стандартный класс dict языка python.
	Башню образуют фиксированные Ду.
	Структура словаря:
		graph[фиксированный_ду] = [соседний_фиксированный_ду, соседний_фиксированный_ду, ...]
	То есть каждому фиксированному Ду (узлу) в графе сопоставляется список соседних (т.е. соединенных с ним пружинками) фиксированных Ду (соседних узлов графа).

	Атрибуты (добавленные и переопределенные в классе DooFixed):
	----------
	fixed_doo_for_build : list
		Пара фиксированных Ду (узлов графа), подходящих для строительства, то есть соответствующих следующим требованиям.
		Требования:
		1. Они не должны быть слишком далеко от схваченного свободного Ду (его положение совпадает с положением курсора мыши).
		2. Они не должны быть слишком близко к схваченному свободному Ду.
		3. Из узлов, соответствующих требованиям 1 и 2, они должны быть ближе всего к схваченному свободному Ду.
		4. Пара узлов, соответствующия требованиям 1, 2 и 3 не должны быть расположены слишком близко друг к другу.
	closest_dist : int или float
		Минимальное расстояние между свободным Ду и фиксированным Ду при строительстве. Значение подобрано эмпирически.
	furthest_dist : int или float
		Максимальное расстояние между свободным Ду и фиксированным Ду при строительстве. Значение подобрано эмпирически.
	between_dist : int или float
		Минимальное рассстояние между двумя фиксированными Ду при строительстве. Значение подобрано эмпирически.
	"""
	def __init__(self):
		super(Graph, self).__init__()
		self.fixed_doo_for_build = []
		self.closest_dist = 20
		self.furthest_dist = 100
		self.between_dist = 40


	def find_fixed_doo_for_build(self, world):
		""" Метод для нахождения фиксированных Ду (узлов графа), подходящих для строительства.

		Сначала очищаем список fixed_doo_for_build.
		Для каждого фиксированного Ду находим расстояние до схваченного Ду в данный момент.
		Если данное расстояние больше closest_dist и меньше furthest_dist, то добавляем Ду в список и сохраняем вычисленное расстояние
		в атрибуте distance.
		Затем полученный список сортируем по возрастанию по значению атрибута distance.
		Оставляем только первых двух фиксированных Ду, то есть двух ближайших к схваченному Ду.
		Затем проверяем, насколько близко расположены подходящие фиксированные Ду друг к другу.
		Если расстояние между ними меньше between_dist, то подходящих для строительства узлов графа не найдено.

		Аргументы:
		----------
		world : World
			Объект содержащий переменную со схваченным Ду и методы для нахождения расстояний.
		"""
		self.fixed_doo_for_build.clear()
		for fixed_doo in self.keys():
			distance = world.distance_between_bodies(fixed_doo.body, world.shape_being_dragged.body)
			if distance > self.closest_dist and distance < self.furthest_dist:
				self.fixed_doo_for_build.append(fixed_doo)
				fixed_doo.distance = distance
		self.fixed_doo_for_build.sort(key=lambda fixed_doo: fixed_doo.distance)
		self.fixed_doo_for_build = self.fixed_doo_for_build[:2] 	# Даже если длина списка меньше 2, то все работает и не выдает ошибку.
		if len(self.fixed_doo_for_build) < 2 or (world.distance_between_bodies(self.fixed_doo_for_build[0].body, self.fixed_doo_for_build[1].body) < self.between_dist):
			self.fixed_doo_for_build.clear()
